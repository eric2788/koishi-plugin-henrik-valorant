/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DefaultApi", () => {
  let instance: api.DefaultApi
  beforeEach(function() {
    instance = new api.DefaultApi(config)
  });

  test("valorantV1AccountNameTagGet", () => {
    const name: string = "name_example"
    const tag: string = "tag_example"
    const force: boolean = true
    return expect(instance.valorantV1AccountNameTagGet(name, tag, force, {})).resolves.toBe(null)
  })
  test("valorantV1ByPuuidAccountPuuidGet", () => {
    const puuid: string = "puuid_example"
    const force: boolean = true
    return expect(instance.valorantV1ByPuuidAccountPuuidGet(puuid, force, {})).resolves.toBe(null)
  })
  test("valorantV1ByPuuidLifetimeMatchesAffinityPuuidGet", () => {
    const affinity: api.Affinities = undefined
    const puuid: string = "puuid_example"
    const mode: api.ModesApi = undefined
    const map: api.Maps = undefined
    const page: number = 56
    const size: number = 56
    return expect(instance.valorantV1ByPuuidLifetimeMatchesAffinityPuuidGet(affinity, puuid, mode, map, page, size, {})).resolves.toBe(null)
  })
  test("valorantV1ByPuuidLifetimeMmrHistoryRegionPuuidGet", () => {
    const region: api.Affinities = undefined
    const puuid: string = "puuid_example"
    const page: number = 56
    const size: number = 56
    return expect(instance.valorantV1ByPuuidLifetimeMmrHistoryRegionPuuidGet(region, puuid, page, size, {})).resolves.toBe(null)
  })
  test("valorantV1ByPuuidMmrAffinityPuuidGet", () => {
    const affinity: api.Affinities = undefined
    const puuid: string = "puuid_example"
    return expect(instance.valorantV1ByPuuidMmrAffinityPuuidGet(affinity, puuid, {})).resolves.toBe(null)
  })
  test("valorantV1ByPuuidMmrHistoryAffinityPuuidGet", () => {
    const affinity: api.Affinities = undefined
    const puuid: string = "puuid_example"
    return expect(instance.valorantV1ByPuuidMmrHistoryAffinityPuuidGet(affinity, puuid, {})).resolves.toBe(null)
  })
  test("valorantV1ContentGet", () => {
    const locale: string = "locale_example"
    return expect(instance.valorantV1ContentGet(locale, {})).resolves.toBe(null)
  })
  test("valorantV1CrosshairGenerateGet", () => {
    const id: string = "id_example"
    return expect(instance.valorantV1CrosshairGenerateGet(id, {})).resolves.toBe(null)
  })
  test("valorantV1EsportsScheduleGet", () => {
    const region: string = "region_example"
    const league: string = "league_example"
    return expect(instance.valorantV1EsportsScheduleGet(region, league, {})).resolves.toBe(null)
  })
  test("valorantV1LeaderboardAffinityGet", () => {
    const affinity: api.Affinities = undefined
    const puuid: string = "puuid_example"
    const name: string = "name_example"
    const tag: string = "tag_example"
    const season: api.Seasons = undefined
    return expect(instance.valorantV1LeaderboardAffinityGet(affinity, puuid, name, tag, season, {})).resolves.toBe(null)
  })
  test("valorantV1LifetimeMatchesAffinityNameTagGet", () => {
    const affinity: api.Affinities = undefined
    const name: string = "name_example"
    const tag: string = "tag_example"
    const mode: api.ModesApi = undefined
    const map: api.Maps = undefined
    const page: number = 56
    const size: number = 56
    return expect(instance.valorantV1LifetimeMatchesAffinityNameTagGet(affinity, name, tag, mode, map, page, size, {})).resolves.toBe(null)
  })
  test("valorantV1LifetimeMmrHistoryAffinityNameTagGet", () => {
    const affinity: api.Affinities = undefined
    const name: string = "name_example"
    const tag: string = "tag_example"
    const page: number = 56
    const size: number = 56
    return expect(instance.valorantV1LifetimeMmrHistoryAffinityNameTagGet(affinity, name, tag, page, size, {})).resolves.toBe(null)
  })
  test("valorantV1MmrAffinityNameTagGet", () => {
    const name: string = "name_example"
    const tag: string = "tag_example"
    const affinity: api.Affinities = undefined
    return expect(instance.valorantV1MmrAffinityNameTagGet(name, tag, affinity, {})).resolves.toBe(null)
  })
  test("valorantV1MmrHistoryAffinityNameTagGet", () => {
    const name: string = "name_example"
    const tag: string = "tag_example"
    const affinity: api.Affinities = undefined
    return expect(instance.valorantV1MmrHistoryAffinityNameTagGet(name, tag, affinity, {})).resolves.toBe(null)
  })
  test("valorantV1PremierConferencesGet", () => {
    return expect(instance.valorantV1PremierConferencesGet({})).resolves.toBe(null)
  })
  test("valorantV1PremierLeaderboardAffinityConferenceDivisionGet", () => {
    const affinity: api.Affinities = undefined
    const conference: api.PremierConferences = undefined
    const division: number = 1.2
    return expect(instance.valorantV1PremierLeaderboardAffinityConferenceDivisionGet(affinity, conference, division, {})).resolves.toBe(null)
  })
  test("valorantV1PremierLeaderboardAffinityConferenceGet", () => {
    const affinity: api.Affinities = undefined
    const conference: api.PremierConferences = undefined
    return expect(instance.valorantV1PremierLeaderboardAffinityConferenceGet(affinity, conference, {})).resolves.toBe(null)
  })
  test("valorantV1PremierLeaderboardAffinityGet", () => {
    const affinity: api.Affinities = undefined
    return expect(instance.valorantV1PremierLeaderboardAffinityGet(affinity, {})).resolves.toBe(null)
  })
  test("valorantV1PremierSearchGet", () => {
    const name: string = "name_example"
    const tag: string = "tag_example"
    const division: number = 1.2
    const conference: api.PremierConferences = undefined
    return expect(instance.valorantV1PremierSearchGet(name, tag, division, conference, {})).resolves.toBe(null)
  })
  test("valorantV1PremierSeasonsAffinityGet", () => {
    const affinity: api.Affinities = undefined
    return expect(instance.valorantV1PremierSeasonsAffinityGet(affinity, {})).resolves.toBe(null)
  })
  test("valorantV1PremierTeamIdGet", () => {
    const teamId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.valorantV1PremierTeamIdGet(teamId, {})).resolves.toBe(null)
  })
  test("valorantV1PremierTeamIdHistoryGet", () => {
    const teamId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.valorantV1PremierTeamIdHistoryGet(teamId, {})).resolves.toBe(null)
  })
  test("valorantV1PremierTeamNameTeamTagGet", () => {
    const teamName: string = "teamName_example"
    const teamTag: string = "teamTag_example"
    return expect(instance.valorantV1PremierTeamNameTeamTagGet(teamName, teamTag, {})).resolves.toBe(null)
  })
  test("valorantV1PremierTeamNameTeamTagHistoryGet", () => {
    const teamName: string = "teamName_example"
    const teamTag: string = "teamTag_example"
    return expect(instance.valorantV1PremierTeamNameTeamTagHistoryGet(teamName, teamTag, {})).resolves.toBe(null)
  })
  test("valorantV1QueueStatusAffinityGet", () => {
    const affinity: api.Affinities = undefined
    return expect(instance.valorantV1QueueStatusAffinityGet(affinity, {})).resolves.toBe(null)
  })
  test("valorantV1RawPost", () => {
    const body: any = undefined
    return expect(instance.valorantV1RawPost(body, {})).resolves.toBe(null)
  })
  test("valorantV1StatusAffinityGet", () => {
    const affinity: api.Affinities = undefined
    return expect(instance.valorantV1StatusAffinityGet(affinity, {})).resolves.toBe(null)
  })
  test("valorantV1StoreFeaturedGet", () => {
    return expect(instance.valorantV1StoreFeaturedGet({})).resolves.toBe(null)
  })
  test("valorantV1StoreOffersGet", () => {
    return expect(instance.valorantV1StoreOffersGet({})).resolves.toBe(null)
  })
  test("valorantV1VersionAffinityGet", () => {
    return expect(instance.valorantV1VersionAffinityGet({})).resolves.toBe(null)
  })
  test("valorantV1WebsiteCountryCodeGet", () => {
    return expect(instance.valorantV1WebsiteCountryCodeGet({})).resolves.toBe(null)
  })
  test("valorantV2ByPuuidMmrAffinityPuuidGet", () => {
    const affinity: api.Affinities = undefined
    const puuid: string = "puuid_example"
    const season: api.Seasons = undefined
    return expect(instance.valorantV2ByPuuidMmrAffinityPuuidGet(affinity, puuid, season, {})).resolves.toBe(null)
  })
  test("valorantV2LeaderboardAffinityGet", () => {
    const affinity: api.Affinities = undefined
    const puuid: string = "puuid_example"
    const name: string = "name_example"
    const tag: string = "tag_example"
    const season: api.Seasons = undefined
    return expect(instance.valorantV2LeaderboardAffinityGet(affinity, puuid, name, tag, season, {})).resolves.toBe(null)
  })
  test("valorantV2MatchMatchIdGet", () => {
    const matchId: string = "38400000-8cf0-11bd-b23e-10b96e4ef00d"
    return expect(instance.valorantV2MatchMatchIdGet(matchId, {})).resolves.toBe(null)
  })
  test("valorantV2MmrAffinityNameTagGet", () => {
    const name: string = "name_example"
    const tag: string = "tag_example"
    const affinity: api.Affinities = undefined
    const season: api.Seasons = undefined
    return expect(instance.valorantV2MmrAffinityNameTagGet(name, tag, affinity, season, {})).resolves.toBe(null)
  })
  test("valorantV2StoreFeaturedGet", () => {
    return expect(instance.valorantV2StoreFeaturedGet({})).resolves.toBe(null)
  })
  test("valorantV2StoreOffersGet", () => {
    return expect(instance.valorantV2StoreOffersGet({})).resolves.toBe(null)
  })
  test("valorantV3ByPuuidMatchesAffinityPuuidGet", () => {
    const affinity: api.Affinities = undefined
    const puuid: string = "puuid_example"
    const mode: api.ModesApi = undefined
    const map: api.Maps = undefined
    const size: number = 56
    return expect(instance.valorantV3ByPuuidMatchesAffinityPuuidGet(affinity, puuid, mode, map, size, {})).resolves.toBe(null)
  })
  test("valorantV3MatchesAffinityNameTagGet", () => {
    const name: string = "name_example"
    const tag: string = "tag_example"
    const affinity: api.Affinities = undefined
    return expect(instance.valorantV3MatchesAffinityNameTagGet(name, tag, affinity, {})).resolves.toBe(null)
  })
})

